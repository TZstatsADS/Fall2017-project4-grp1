find_var()[[3]]
length(find_var()[[3]])
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
return(list(var_max, var_min, var_vector))
}
variance_weight_assign <- function(i, j, mat=Table_1){
}
find_var()
find_var()[[3]]
length(find_var()[[3]])
(c(1,2,4) - 3)/6
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
v <- (var_vector - var_min)/var_max
return(v)
}
variance_weight_assign <- function(i, j, mat=Table_1){
}
length(find_var())
sum(c(1,2))
scale(c(1,2,3))
scale(c(1,2,3))[1]
scale(c(1,2,3))[2]
scale(c(1,2,3))[3]
?scale
scale(Table_1[1, ])
c(1,2)*c(3,4)
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
v <- (var_vector - var_min)/var_max
return(v)
}
variance_weight_assign <- function(i, j, v){
r_i <- scale(mat[i, ])
r_j <- scale(mat[j, ])
weight <- sum(v*r_i*r_j)/sum(v)
return(weight)
}
variance_weight_matrix <- function(mat_dim_1, mat = Table_1){
mat_weight = matrix(1, nrow=mat_dim_1, ncol=mat_dim_1)
v <- find_var(mat = mat)
for (i in 1:mat_dim_1){
for (j in (i+1):mat_dim_1){
weight <- variance_weight_assign(i, j, v)
print(weight)
mat_weight[i, j] <- weight
mat_weight[j, i] <- weight
}
}
return(mat_weight)
}
mat_variance_weight <- variance_weight_matrix(dim(Table_1)[1], mat = Table_1)
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
v <- (var_vector - var_min)/var_max
return(v)
}
variance_weight_assign <- function(i, j, v, mat=Table_1){
r_i <- scale(mat[i, ])
r_j <- scale(mat[j, ])
weight <- sum(v*r_i*r_j)/sum(v)
return(weight)
}
variance_weight_matrix <- function(mat_dim_1, mat = Table_1){
mat_weight = matrix(1, nrow=mat_dim_1, ncol=mat_dim_1)
v <- find_var(mat = mat)
for (i in 1:mat_dim_1){
for (j in (i+1):mat_dim_1){
weight <- variance_weight_assign(i, j, v, mat = Table_1)
print(weight)
mat_weight[i, j] <- weight
mat_weight[j, i] <- weight
}
}
return(mat_weight)
}
mat_variance_weight <- variance_weight_matrix(dim(Table_1)[1], mat = Table_1)
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
v <- (var_vector - var_min)/var_max
return(v)
}
variance_weight_assign <- function(i, j, v, mat=Table_1){
r_i <- scale(mat[i, ])
r_j <- scale(mat[j, ])
weight <- sum(v*r_i*r_j)/sum(v)
return(weight)
}
variance_weight_matrix <- function(mat_dim_1, mat = Table_1){
mat_weight = matrix(1, nrow=mat_dim_1, ncol=mat_dim_1)
v <- find_var(mat = mat)
for (i in 1:mat_dim_1){
print(i)
print(Sys.time())
for (j in (i+1):mat_dim_1){
weight <- variance_weight_assign(i, j, v, mat = Table_1)
print(weight)
mat_weight[i, j] <- weight
mat_weight[j, i] <- weight
}
}
return(mat_weight)
}
mat_variance_weight <- variance_weight_matrix(dim(Table_1)[1], mat = Table_1)
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
v <- (var_vector - var_min)/var_max
return(v)
}
variance_weight_assign <- function(i, j, v, mat=Table_1){
r_i <- scale(mat[i, ])
r_j <- scale(mat[j, ])
weight <- sum(v*r_i*r_j)/sum(v)
return(weight)
}
variance_weight_matrix <- function(mat_dim_1, mat = Table_1){
mat_weight = matrix(1, nrow=mat_dim_1, ncol=mat_dim_1)
v <- find_var(mat = mat)
for (i in 1:mat_dim_1){
print(i)
print(Sys.time())
for (j in (i+1):mat_dim_1){
weight <- variance_weight_assign(i, j, v, mat = Table_1)
mat_weight[i, j] <- weight
mat_weight[j, i] <- weight
}
}
return(mat_weight)
}
mat_variance_weight <- variance_weight_matrix(dim(Table_1)[1], mat = Table_1)
dataset1_train <- read.csv("../data/data_sample/eachmovie_sample/data_train.csv")
dataset2_train <- read.csv("../data/data_sample/MS_sample/data_train.csv")
Transformer <- function(data.set){
columns.data <- sort(unique(data.set$Movie))
rows.data <- sort(unique(data.set$User))
Table_ <- matrix(0,nrow = length(rows.data), ncol = length(columns.data))
for(i in 1:length(columns.data)){
col.name <- columns.data[i]
index <- which(data.set$Movie == col.name)
scores <- data.set[index,4] #Scores
users <- data.set[index,3] #Users
index2 <- which(rows.data %in% users)
Table_[index2,i] = scores
Table_[!index2,i] = 0
}
colnames(Table_) <- columns.data
rownames(Table_) <- rows.data
return(Table_)
}
Table_1 <- Transformer(dataset1_train)
View(Table_1)
View(Table_1)
Transformer2 <- function(data){
user_num <- which(data$V1 == 'C')
user_id <- data$V2[user_num]
page_id <- unique(data$V2[which(data$V1 == 'V')])
Table_2 <- matrix(0, nrow=length(user_id), ncol=length(page_id))
rownames(Table_2) <- as.character(user_id)
colnames(Table_2) <- as.character(page_id)
for (i in 1:length(user_num)){
start_num <- user_num[i]
if (i != length(user_num)){
end_num <- user_num[i+1]
}
else {
end_num <- nrow(data)+1
}
user_id_mat <- as.character(user_id[i])
for (j in (start_num+1):(end_num-1)){
page_id_mat <- as.character(data$V2[j])
Table_2[user_id_mat, page_id_mat] <- 1
}
}
return(Table_2)
}
Table_2 <- Transformer2(dataset2_train)
View(Table_2)
View(Table_2)
setwd("~/Documents/GitHub/fall2017-project4-grp1/lib")
dataset1_train <- read.csv("../data/data_sample/eachmovie_sample/data_train.csv")
=======
dataset2_train <- read.csv("../data/data_sample/MS_sample/data_train.csv")
Transformer <- function(data.set){
columns.data <- sort(unique(data.set$Movie))
rows.data <- sort(unique(data.set$User))
Table_ <- matrix(0,nrow = length(rows.data), ncol = length(columns.data))
for(i in 1:length(columns.data)){
col.name <- columns.data[i]
index <- which(data.set$Movie == col.name)
scores <- data.set[index,4] #Scores
users <- data.set[index,3] #Users
index2 <- which(rows.data %in% users)
Table_[index2,i] = scores
Table_[!index2,i] = NA
}
colnames(Table_) <- columns.data
rownames(Table_) <- rows.data
return(Table_)
}
Table_1 <- Transformer(dataset1_train)
Transformer2 <- function(data){
user_num <- which(data$V1 == 'C')
user_id <- data$V2[user_num]
page_id <- unique(data$V2[which(data$V1 == 'V')])
Table_2 <- matrix(0, nrow=length(user_id), ncol=length(page_id))
rownames(Table_2) <- as.character(user_id)
colnames(Table_2) <- as.character(page_id)
for (i in 1:length(user_num)){
start_num <- user_num[i]
if (i != length(user_num)){
end_num <- user_num[i+1]
}
else {
end_num <- nrow(data)+1
}
user_id_mat <- as.character(user_id[i])
for (j in (start_num+1):(end_num-1)){
page_id_mat <- as.character(data$V2[j])
Table_2[user_id_mat, page_id_mat] <- 1
}
}
return(Table_2)
}
Table_2 <- Transformer2(dataset2_train)
find_var <- function(mat=Table_1){
var_vector <- apply(Table_1, 2, var)
var_max <- max(var_vector)
var_min <- min(var_vector)
v <- (var_vector - var_min)/var_max
return(v)
}
v <- find_var()
which(v<=0)
which(v<0)
v[1559]
v[1622]
scale(Table_1[1, ])
load(../output/movie_test.RData)
load('../output/movie_test.RData')
load('../output/pearson_weight.RData')
neighbors.select <- function(try1, thresholding = 0.1){
subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = matrix(0, ncol = subset.neighbor, nrow = nrow(try1))
for(i in 1:nrow(try1)){
vec1 = try1[i,]
n = length(vec1)
index_ = which(rank(vec1, ties.method = 'first') %in% 1:subset.neighbor)
top.neighbors[i,] = index_[1:subset.neighbor]
}
return(top.neighbors)
}
pearson_top = neighbors.select(pearson_weight)
top.neighbors = list()
?list
i = 1
try1 = pearson_weight
vec1 = try1[i,]
index_ = which(vec1 > thresholding)
thresholding = 0.3
index_ = which(vec1 > thresholding)
thresholding = 0.5
index_ = which(vec1 > thresholding)
top.neighbors[[i]] = index_
neighbors.select <- function(try1, thresholding = 0.5){
#subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = list()
for(i in 1:nrow(try1)){
vec1 = try1[i,]
index_ = which(vec1 > thresholding)
top.neighbors[[i]] = index_
}
return(top.neighbors)
}
pearson_top = neighbors.select(pearson_weight)
length(pearson_top)
sum(length(pearson_top[[i]]) for i in 1:5055)
dim(pearson_top)
ncol(pearson_top[[1]])
length(pearson_top[[1]])
length(pearson_top)
neighbors.select <- function(try1, thresholding = 0.5){
#subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = list()
coverage = 0
for(i in 1:nrow(try1)){
vec1 = try1[i,]
index_ = which(vec1 > thresholding)
top.neighbors[[i]] = index_
coverage = coverage + length(top.neighbors[[i]])
}
return(top.neighbors, coverage/length(top.neighbors))
}
pearson_top, coverageRatio= neighbors.select(pearson_weight)
(pearson_top, coverageRatio) = neighbors.select(pearson_weight)
results = neighbors.select(pearson_weight)
neighbors.select <- function(try1, thresholding = 0.5){
#subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = list()
coverage = 0
for(i in 1:nrow(try1)){
vec1 = try1[i,]
index_ = which(vec1 > thresholding)
top.neighbors[[i]] = index_
coverage = coverage + length(top.neighbors[[i]])
}
return(list(top.neighbors, coverage/length(top.neighbors)))
}
results = neighbors.select(pearson_weight)
neighbors.select <- function(simweights, thresholding = 0.5){
#subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = list()
coverage = 0
for(i in 1:nrow(simweights)){
vec1 = simweights[i,]
index_ = which(abs(vec1) > thresholding)
top.neighbors[[i]] = index_
coverage = coverage + length(top.neighbors[[i]])
}
return(top.neighbors)
}
results = neighbors.select(pearson_weight)
is.na(movie_test)
tabletf = is.na(movie_test)
View(tabletf)
load('../output/movie_train.RData')
testdat = movie_test
traindat = movie_train
load('../output/movie_train.RData')
load('../output/movie_train.RData')
tabletf=[]
tabletf=c()
movie_train
load("../output/movie_train.RData")
setwd("~/Documents/GitHub/fall2017-project4-grp1/lib")
load("../output/movie_train.RData")
load("../output/MS_train.RData")
load("../output/movie_train.RData")
i = 1
neighbor.weights = simweights[i,top.neighbors[[i]]]
simweights = pearson_weight
neighbor.weights = simweights[i,top.neighbors[[i]]]
neighbors.select <- function(simweights, thresholding = 0.5){
#subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = list()
coverage = 0
for(i in 1:nrow(simweights)){
vec1 = simweights[i,]
index_ = which((abs(vec1) > thresholding) & (vec1 != 1))
top.neighbors[[i]] = index_
coverage = coverage + length(top.neighbors[[i]])
}
return(top.neighbors)
}
results = neighbors.select(pearson_weight)
neighbor.weights = simweights[i,top.neighbors[[i]]]
head(vec1 != 1)
neighbors.select <- function(simweights, thresholding = 0.5){
#subset.neighbor = floor(thresholding * nrow(try1))
top.neighbors = list()
coverage = 0
for(i in 1:nrow(simweights)){
vec1 = simweights[i,]
index_ = which((abs(vec1) > thresholding) & (vec1 != 1))
top.neighbors[[i]] = index_
coverage = coverage + length(top.neighbors[[i]])
}
return(top.neighbors)
}
results = neighbors.select(pearson_weight)
simweights = pearson_weight
neighbor.weights = simweights[i,top.neighbors[[i]]]
top.neighbors = results
neighbor.weights = simweights[i,top.neighbors[[i]]]
neighbor.ratings = testdat[top.neighbors[[i]], ]
View(neighbor.ratings)
View(neighbor.ratings)
neighbor.ratings[[2]]
dim(neighbor.ratings)
neighbor.avg = apply(traindat[top.neighbors[i,], ],1,mean,na.rm= T)
neighbor.avg = apply(traindat[top.neighbors[[i]], ],1,mean,na.rm= T)
load("/Users/zhaojing/Documents/GitHub/fall2017-project4-grp1/output/movie_train.RData")
load("/Users/zhaojing/Documents/GitHub/fall2017-project4-grp1/output/movie_train.RData")
movie_train <- read.csv("../data/data_sample/eachmovie_sample/data_train.csv")
movie_train <- Transformer(movie_train)
Transformer <- function(data.set){
columns.data <- sort(unique(data.set$Movie))
rows.data <- sort(unique(data.set$User))
Table_ <- matrix(NA,nrow = length(rows.data), ncol = length(columns.data))
for(i in 1:length(columns.data)){
col.name <- columns.data[i]
index <- which(data.set$Movie == col.name)
scores <- data.set[index,4] #Scores
users <- data.set[index,3] #Users
index2 <- which(rows.data %in% users)
Table_[index2,i] = scores
Table_[!index2,i] = NA
}
colnames(Table_) <- columns.data
rownames(Table_) <- rows.data
return(Table_)
}
movie_train <- Transformer(movie_train)
traindat = movie_train
neighbor.ratings = traindat[top.neighbors[[i]], ]
neighbor.avg = apply(traindat[top.neighbors[[i]], ],1,mean,na.rm= T)
avg.ratings = apply(traindat, 1, mean, na.rm = T)
avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
prediction.matrix[i,] = avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
prediction.matrix = matrix(NA, ncol = ncol(testdat), nrow = nrow(testdat))
prediction.matrix[i,] = avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
dim(neighbor.weights)
length(neighbor.weights)
dim(neighbor.ratings)
(neighbor.ratings-neighbor.avg)
(neighbor.ratings-neighbor.avg) * neighbor.weights
sum(neighbor.weights, na.rm = T)
head(neighbor.weights)
head(apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T))
head((neighbor.ratings-neighbor.avg))
t = apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T)
head(t)
length(t)
prediction.matrix[i,] = avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
length(apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T))
avg.ratings[i]
avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
prediction.matrix = matrix(NA, ncol = ncol(testdat), nrow = nrow(traindat))
prediction.matrix = matrix(NA, ncol = ncol(traindat), nrow = nrow(traindat))
prediction.matrix[i,] = avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
head( prediction.matrix[i,] )
tail( prediction.matrix[i,] )
sum( prediction.matrix[i,] >=4)
sum( prediction.matrix[i,] <=3)
prediction.matrix[i,test.loc[i,]] = NA
test.loc = !is.na(testdat)
prediction.matrix[i,test.loc[i,]] = NA
prediction.matrix[i,]
test.loc = is.na(testdat)
prediction.matrix[i,test.loc[i,]] = NA
head( prediction.matrix[i,] )
prediction.matrix[i,]
pred.matrix <- function(testdat, traindat, simweights, top.neighbors){
prediction.matrix = matrix(NA, ncol = ncol(traindat), nrow = nrow(traindat))
test.loc = is.na(testdat)
avg.ratings = apply(traindat, 1, mean, na.rm = T)
# neighbor.weights = try[user,top.neighbors]
for(i in 1:nrow(traindat)){
neighbor.weights = simweights[i,top.neighbors[[i]]]
neighbor.ratings = traindat[top.neighbors[[i]], ]
neighbor.avg = apply(traindat[top.neighbors[[i]], ],1,mean,na.rm= T)
prediction.matrix[i,] = avg.ratings[i] + apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T) / sum(neighbor.weights, na.rm = T)
prediction.matrix[i,test.loc[i,]] = NA
}
return(prediction.matrix)
}
pearsonpred = pred.matrix(movie_test,pearson_weight,pearson_top)
pearsonpred = pred.matrix(movie_test,movie_train,pearson_weight,pearson_top)
View(pearsonpred)
View(pearsonpred)
evaluation.mae <- function(pred.val, true.val){
mae <- sum(abs(pred.val - true.val, na.rm = T))/nrow(pred.val)
return(mae)
}
mae.pearson = evaluation.mae(pearsonpred, movie_test)
evaluation.mae <- function(pred.val, true.val){
pred.val = pred.val[,1:ncol(true.val)]
mae <- sum(abs(pred.val - true.val, na.rm = T))/nrow(pred.val)
return(mae)
}
mae.pearson = evaluation.mae(pearsonpred, movie_test)
pred.val = pearsonpred
true.val = movie_test
pred.val = pred.val[,1:ncol(true.val)]
mae <- mean(abs(pred.val - true.val, na.rm = T))
mae <- mean(abs(pred.val - true.val))
mae <- mean(abs(pred.val - true.val), na.rm = T)
t = apply(abs(pred.val - true.val), 1, mean)
t = apply(abs(pred.val - true.val), 1, mean, na.rm = T)
head(t)
View(movie_test)
i
neighbor.ratings
neighbor.ratings = traindat[top.neighbors[[i]], ]
View(neighbor.ratings)
View(neighbor.ratings)
View(movie_train)
sum(neighbor.weights < 0)
t = apply((neighbor.ratings-neighbor.avg) * neighbor.weights, 2, sum, na.rm=T)
t[1]
head(neighbor.ratings-neighbor.avg)
a = (neighbor.ratings-neighbor.avg)
head(a)
View(a)
View(a)
neighbor.avg[1]
sum(a[,1]*neighbor.weights)
sum(a[,1]*neighbor.weights, na.rm=F)
sum(a[,1]*neighbor.weights, na.rm=T)
